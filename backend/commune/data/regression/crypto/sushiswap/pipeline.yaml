
module: data.regression.crypto.sushiswap.pipeline.Pipeline

delay_threshold: 30

batch_size: 32
skip_step: 10

# define the splits

splits:
  train: ["2021-01-01", "2022-02-01"]
  val: ["2021-02-01", "2022-05-20"]
periods:
  # the input period
  input: 128
  output: 12

generated_periods:
  input: 256
  output: 64
base_ticker: "15m"
max_ticker: "120m"
# feature groups (categorical (cat) and continuous (con))
feature_group:
  cat: 
    - "Time Quarter"
    - "Time Day of Week"
    - "Time Day"
    - "Time Hour"
  con: 
  - reserveUSD
  - reserveETH
  - token0Price
  - token1Price
  - reserve0
  - reserve1
  - totalSupply
  - volumeUSD
  - volumeToken0
  - volumeToken1
  - trackedReserveETH
  - untrackedVolumeUSD
  - tokenPriceUSD
  
# features that span both the input and output

known_future_features: [ "Time Quarter",
                      "Time Day of Week",
                      "Time Day",
                      "Time Hour" ]
gt_keys:
  - "tokenPriceUSD"
timestamp_column: "timestamp"

tag:
  processed_data: "base"
  processed_split: "base"
  processed_samples: "diff"
input_keys: []
dag: 
  load_block_data: get_cfg(process.extract.crypto.ethereum_block.module)
  load_data: get_cfg(process.extract.crypto.sushiswap.module)
  process_data: get_cfg(process.regression.crypto.sushiswap.process_data.module)
  sample_generator: get_cfg(process.regression.crypto.sushiswap.sample_generator.module)

  
client: get_cfg(client.manager)

actor:
  name: local_copy(module)
  resources:
    'num_cpus': 1.0
    'num_gpus': 0.02
  max_concurrency: 4
  refresh: true

timescales: get_cfg(config.meta.crypto.timescales)

write:
  cfg: 
    client: mongo
    params:
      database: commune
      collection: config
      query:
        module: local_copy(module)